{"version":3,"sources":["components/Button/Button.module.css","App.module.css","components/Button/Button.tsx","redux/counter-reducer.ts","components/Counter/Counter.tsx","components/Input/Input.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","utils/localstorage-utils.ts","index.tsx","components/Counter/Counter.module.css","components/Input/Input.module.css","components/Settings/Settings.module.css"],"names":["module","exports","Button","props","buttonDisabled","incorrectValue","disabled","buttonClassName","styles","button","onClick","callback","className","titleOfButton","InitialState","values","startValue","maxValue","currentValueCounter","disable","incDisabled","blockOfScreen","resetDisable","setDisable","titles","Counter","dispatch","useDispatch","useSelector","state","counter","classNameValue","style","number","title","classNameRed","red","wrapper","screen","buttons","type","Input","item","value","input","error","onChange","e","currentTarget","Settings","changeMaxValueAC","changeStartValueAC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e3899f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3dFg0\",\"disabled\":\"Button_disabled__2XHiC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3VNfy\"};","import React from 'react'\r\nimport styles from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    titleOfButton: string\r\n    incorrectValue: boolean\r\n    disabled?: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    const buttonDisabled = props.incorrectValue || props.disabled\r\n\r\n    const buttonClassName = `${styles.button} ${props.incorrectValue || props.disabled ? styles.disabled : ''}`\r\n\r\n    return (\r\n        <button onClick={props.callback}\r\n                disabled={buttonDisabled}\r\n                className={buttonClassName}>{props.titleOfButton}</button>\r\n    )\r\n}","type CounterActionType = ReturnType<typeof increaseAC>\r\n    | ReturnType<typeof resetAC>\r\n    | ReturnType<typeof changeStartValueAC>\r\n    | ReturnType<typeof changeMaxValueAC>\r\n    | ReturnType<typeof setSettingsAC>\r\n\r\nexport type ValuesType = {\r\n    startValue: number\r\n    maxValue: number\r\n    currentValueCounter: number\r\n}\r\n\r\nexport type DisableType = {\r\n    incDisabled: boolean\r\n    blockOfScreen: boolean\r\n    resetDisable: boolean\r\n    setDisable: boolean\r\n    incorrectValue: boolean\r\n}\r\n\r\nexport type InitType = {\r\n    values: ValuesType\r\n    disable: DisableType\r\n    titles: string[]\r\n}\r\n\r\nconst InitialState = {\r\n    values: {\r\n        startValue: 0,\r\n        maxValue: 5,\r\n        currentValueCounter: 0,\r\n    },\r\n    disable: {\r\n        incDisabled: false,\r\n        blockOfScreen: false,\r\n        resetDisable: true,\r\n        setDisable: true,\r\n        incorrectValue: false,\r\n    },\r\n    titles: ['enter values and press \\'set\\'', 'Incorrect value!'],\r\n}\r\n\r\nexport const counterReducer = (state: InitType = InitialState, action: CounterActionType): InitType => {\r\n    switch (action.type) {\r\n        case 'INCREASE-ONE': {\r\n            return (state.values.currentValueCounter + 1) === state.values.maxValue\r\n                ? {\r\n                    ...state,\r\n                    values: {\r\n                        ...state.values,\r\n                        currentValueCounter: state.values.currentValueCounter + 1,\r\n                    },\r\n                    disable: {\r\n                        ...state.disable,\r\n                        incDisabled: true,\r\n                        resetDisable: false,\r\n                    }\r\n                }\r\n                : {\r\n                    ...state,\r\n                    values: {\r\n                        ...state.values,\r\n                        currentValueCounter: state.values.currentValueCounter + 1,\r\n                    },\r\n                    disable: {\r\n                        ...state.disable,\r\n                        resetDisable: false,\r\n                    },\r\n                }\r\n        }\r\n        case 'RESET': {\r\n            return {\r\n                ...state,\r\n                values: {\r\n                    ...state.values,\r\n                    currentValueCounter: state.values.startValue,\r\n                },\r\n                disable: {\r\n                    ...state.disable,\r\n                    incDisabled: false,\r\n                    resetDisable: true,\r\n                },\r\n            }\r\n        }\r\n        case 'CHANGE-START-VALUE': {\r\n            return action.value < 0 || action.value >= state.values.maxValue\r\n                ? {\r\n                    ...state,\r\n                    values: {\r\n                        ...state.values,\r\n                        startValue: action.value\r\n                    },\r\n                    disable: {\r\n                        ...state.disable,\r\n                        incorrectValue: true,\r\n                    }\r\n                }\r\n                : {\r\n                    ...state,\r\n                    values: {\r\n                        ...state.values,\r\n                        startValue: action.value\r\n                    },\r\n                    disable: {\r\n                        ...state.disable,\r\n                        blockOfScreen: true,\r\n                        incorrectValue: false,\r\n                        incDisabled: false,\r\n                        setDisable: false,\r\n                    }\r\n                }\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            return action.value < 0 || action.value <= state.values.startValue\r\n                ? {\r\n                    ...state,\r\n                    values: {\r\n                        ...state.values,\r\n                        maxValue: action.value\r\n                    },\r\n                    disable: {\r\n                        ...state.disable,\r\n                        incorrectValue: true,\r\n                    }\r\n                }\r\n                : {\r\n                    ...state,\r\n                    values: {\r\n                        ...state.values,\r\n                        maxValue: action.value\r\n                    },\r\n                    disable: {\r\n                        ...state.disable,\r\n                        blockOfScreen: true,\r\n                        incorrectValue: false,\r\n                        incDisabled: false,\r\n                        setDisable: false,\r\n                    }\r\n                }\r\n        }\r\n        case 'SET-SETTINGS': {\r\n            return {\r\n                ...state,\r\n                values: {\r\n                    ...state.values,\r\n                    currentValueCounter: state.values.startValue,\r\n                },\r\n                disable: {\r\n                    ...state.disable,\r\n                    blockOfScreen: false,\r\n                    incorrectValue: false,\r\n                    incDisabled: false,\r\n                    setDisable: true,\r\n                    resetDisable: true,\r\n                },\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const increaseAC = () => ({type: 'INCREASE-ONE'} as const)\r\nexport const resetAC = () => ({type: 'RESET'} as const)\r\nexport const changeStartValueAC = (value: number) => ({type: 'CHANGE-START-VALUE', value} as const)\r\nexport const changeMaxValueAC = (value: number) => ({type: 'CHANGE-MAX-VALUE', value} as const)\r\nexport const setSettingsAC = () => ({type: 'SET-SETTINGS'} as const)","import React from 'react';\nimport {Button} from '../Button/Button';\nimport style from './Counter.module.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {DisableType, increaseAC, resetAC, ValuesType} from '../../redux/counter-reducer';\n\ntype CounterPropsType = {}\n\nexport function Counter(props: CounterPropsType) {\n    const dispatch = useDispatch()\n    const values = useSelector<AppStateType, ValuesType>(state => state.counter.values)\n    const disable = useSelector<AppStateType, DisableType>(state => state.counter.disable)\n    const titles = useSelector<AppStateType, string[]>(state => state.counter.titles)\n\n\n    const screenValue = () => {\n        if (disable.incorrectValue) {\n            return titles[1]\n        } else if (disable.blockOfScreen) {\n            return titles[0]\n        } else {\n            return values.currentValueCounter\n        }\n    }\n\n    const increaseByOne = () => dispatch(increaseAC())\n    const resetCounter = () => dispatch(resetAC())\n\n    const classNameValue = `${style.number} ${disable.blockOfScreen || disable.incorrectValue ? style.title : ''}`\n    const classNameRed = disable.incDisabled || disable.incorrectValue ? style.red : ''\n    const disabled = disable.incDisabled || disable.blockOfScreen\n\n    return (\n        <div className={style.wrapper}>\n            <div className={style.screen}>\n                <div className={classNameValue}>\n                    <span className={classNameRed}>{screenValue()}</span>\n                </div>\n            </div>\n            <div className={style.buttons}>\n\n                <Button titleOfButton={'inc'}\n                        incorrectValue={disable.incorrectValue}\n                        disabled={disabled}\n                        callback={increaseByOne}/>\n                <Button titleOfButton={'reset'}\n                        incorrectValue={disable.incorrectValue}\n                        disabled={disable.blockOfScreen || disable.resetDisable}\n                        callback={resetCounter}/>\n            </div>\n        </div>\n    )\n}","import React, {ChangeEvent} from 'react';\nimport style from './Input.module.css';\n\ntype InputPropsType = {\n    title: string\n    value: number\n    error: boolean\n    callback: (value: number) => void\n}\n\nexport function Input(props: InputPropsType) {\n    const onchangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.callback(+e.currentTarget.value)\n    }\n\n    return (\n        <div className={style.item}>\n            <span className={style.title}>{props.title}</span>\n            <input value={props.value}\n                   className={`${style.input} ${props.error ? style.error : ' '}`}\n                   type=\"number\"\n                   onChange={onchangeInputHandler}\n            />\n        </div>\n    )\n}\n","import React from 'react';\nimport style from './Settings.module.css';\nimport {Button} from '../Button/Button';\nimport {Input} from '../Input/Input';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {changeMaxValueAC, changeStartValueAC, DisableType, setSettingsAC, ValuesType} from '../../redux/counter-reducer';\n\ntype SettingsPropsType = {}\n\nexport function Settings(props: SettingsPropsType) {\n    const dispatch = useDispatch()\n    const values = useSelector<AppStateType, ValuesType>(state => state.counter.values)\n    const disable = useSelector<AppStateType, DisableType>(state => state.counter.disable)\n\n    const changeStartValueCounter = (value: number) => dispatch(changeStartValueAC(value))\n    const changeMaxValueCounter = (value: number) => dispatch(changeMaxValueAC(value))\n    const setSettingsCounter = () => dispatch(setSettingsAC())\n\n\n    return (\n        <div className={style.wrapper}>\n            <div className={style.screen}>\n                <Input title={'max value'}\n                       value={values.maxValue}\n                       error={disable.incorrectValue}\n                       callback={changeMaxValueCounter}/>\n                <Input title={'start value'}\n                       value={values.startValue}\n                       error={disable.incorrectValue}\n                       callback={changeStartValueCounter}/>\n            </div>\n            <div className={style.buttons}>\n                <Button titleOfButton={'set'}\n                        incorrectValue={disable.incorrectValue}\n                        callback={setSettingsCounter}\n                        disabled={disable.setDisable}/>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport style from './App.module.css';\nimport {Counter} from './components/Counter/Counter';\nimport {Settings} from './components/Settings/Settings';\n\nexport function App() {\n    return (\n        <div className={style.wrapper}>\n            <Counter />\n            <Settings />\n        </div>\n    )\n\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, Store} from 'redux'\r\nimport {counterReducer} from './counter-reducer'\r\nimport {loadState, saveState} from '../utils/localstorage-utils';\r\n\r\nexport type AppStoreType = typeof store\r\nexport type AppStateType = ReturnType<typeof RootReducer>\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\nlet RootReducer = combineReducers({\r\n    counter: counterReducer,\r\n})\r\n\r\nexport const store: Store = createStore(RootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})","import {AppStateType} from '../redux/redux-store';\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/redux-store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__1t2zA\",\"screen\":\"Counter_screen__3IgIS\",\"number\":\"Counter_number__hb-Di\",\"title\":\"Counter_title__1va55\",\"buttons\":\"Counter_buttons__9EkPX\",\"red\":\"Counter_red___DNrY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Input_item__3Xltk\",\"input\":\"Input_input__2Kcvc\",\"title\":\"Input_title__33WDO\",\"numbers\":\"Input_numbers__2CKBH\",\"error\":\"Input_error__ESJDI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Settings_wrapper__2Gk7n\",\"screen\":\"Settings_screen__1sfvN\",\"buttons\":\"Settings_buttons__f-y3c\"};"],"sourceRoot":""}